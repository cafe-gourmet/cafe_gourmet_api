// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SobreNos {
  id        Int    @id @default(autoincrement())
  descricao String
}

model Contato {
  id             Int    @id @default(autoincrement())
  nome           String
  endereco       String
  telefone       String
  email          String
  descricao      String
  linkGoogleMaps String
}

model Carrinho {
  id         Int @id @default(autoincrement())
  idProduto  Int
  qntProduto Int
  idCliente  Int
}

model Situacao {
  id        Int       @id @default(autoincrement())
  descricao String
  cargos    Cargo[]
  usuarios  Usuario[]
  planos    Plano[]
}

model Permissao {
  id        Int               @id @default(autoincrement())
  descricao String
  cargos    CargoPermissoes[]
}

model Cargo {
  id         Int               @id @default(autoincrement())
  nome       String
  situacao   Situacao          @relation(fields: [idSituacao], references: [id])
  idSituacao Int
  permissoes CargoPermissoes[]
  usuarios   Usuario[]
}

model CargoPermissoes {
  cargo       Cargo     @relation(fields: [idCargo], references: [id])
  idCargo     Int
  permissao   Permissao @relation(fields: [idPermissao], references: [id])
  idPermissao Int

  @@id([idCargo, idPermissao])
}

model Usuario {
  id           Int      @id @default(autoincrement())
  nomeCompleto String
  email        String
  senha        String
  fotoPerfil   Bytes?
  cargo        Cargo    @relation(fields: [idCargo], references: [id])
  idCargo      Int
  situacao     Situacao @relation(fields: [idSituacao], references: [id])
  idSituacao   Int
  cliente      Cliente?
}

model Cliente {
  id        Int       @id @default(autoincrement())
  cpf       String
  telefone  String
  plano     Plano?    @relation(fields: [planoId], references: [id])
  planoId   Int?
  usuario   Usuario   @relation(fields: [idUsuario], references: [id])
  idUsuario Int       @unique
  endereco  Endereco?
}

model Plano {
  id         Int             @id @default(autoincrement())
  nome       String
  preco      Float
  descricao  String
  situacao   Situacao        @relation(fields: [idSituacao], references: [id])
  idSituacao Int
  periodo    PlanoPeriodo    @relation(fields: [idPeriodo], references: [id])
  idPeriodo  Int
  clientes   Cliente[]
  produtos   PlanoProdutos[]
  anexos     Anexo[]
}

model PlanoPeriodo {
  id        Int     @id @default(autoincrement())
  descricao String
  planos    Plano[]
}

model Produto {
  id                       Int             @id @default(autoincrement())
  nome                     String
  marca                    String
  preco                    Float
  codigoBarras             String
  categoria                Categoria       @relation(fields: [idCategoria], references: [id])
  idCategoria              Int
  quantidade               Int
  percentualDescontoMensal Int
  percentualDescontoAnual  Int
  planos                   PlanoProdutos[]
  anexos                   Anexo[]
}

model PlanoProdutos {
  plano     Plano   @relation(fields: [idPlano], references: [id])
  idPlano   Int
  produto   Produto @relation(fields: [idProduto], references: [id])
  idProduto Int

  @@id([idPlano, idProduto])
}

model Categoria {
  id       Int       @id @default(autoincrement())
  nome     String
  produtos Produto[]
}

model Anexo {
  id        Int      @id @default(autoincrement())
  produto   Produto? @relation(fields: [idProduto], references: [id])
  idProduto Int?
  plano     Plano?   @relation(fields: [idPlano], references: [id])
  idPlano   Int?
  arquivo   Bytes
  tipo      String
}

model Endereco {
  id        Int     @id @default(autoincrement())
  cep       String
  estado    String
  cidade    String
  bairro    String
  rua       String
  numero    String
  cliente   Cliente @relation(fields: [idCliente], references: [id])
  idCliente Int     @unique
}
